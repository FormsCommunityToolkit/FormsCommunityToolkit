<?xml version="1.0" encoding="utf-8"?>
<root>
    <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
        <xsd:element name="root" msdata:IsDataSet="true">
            <xsd:complexType>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element name="metadata">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" />
                            </xsd:sequence>
                            <xsd:attribute name="name" use="required" type="xsd:string" />
                            <xsd:attribute name="type" type="xsd:string" />
                            <xsd:attribute name="mimetype" type="xsd:string" />
                            <xsd:attribute ref="xml:space" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="assembly">
                        <xsd:complexType>
                            <xsd:attribute name="alias" type="xsd:string" />
                            <xsd:attribute name="name" type="xsd:string" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="data">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
                            <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
                            <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
                            <xsd:attribute ref="xml:space" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="resheader">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" />
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>2.0</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <data name="ChangeLanguage" xml:space="preserve">
    <value>Change language below, hit Save and see the texts in this page change. This will not affect the rest of the application, it just serves as a demo.</value>
  </data>
    <data name="English" xml:space="preserve">
    <value>English</value>
  </data>
    <data name="Spanish" xml:space="preserve">
    <value>Spanish</value>
  </data>
    <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="CameraViewTitle" xml:space="preserve">
    <value>CameraView</value>
  </data>
  <data name="CameraViewDescription" xml:space="preserve">
    <value>The CameraView allows you to show a live preview from the camera. You can take pictures, record videos and much more!</value>
  </data>
  <data name="CameraViewSampleZoom" xml:space="preserve">
    <value>Zoom: {0}</value>
  </data>
  <data name="CameraViewSampleSnapPicture" xml:space="preserve">
    <value>Snap Picture</value>
  </data>
  <data name="CameraViewSampleStartRecording" xml:space="preserve">
    <value>Start Recording</value>
  </data>
  <data name="CameraViewSampleStopRecording" xml:space="preserve">
    <value>Stop Recording</value>
  </data>
  <data name="RequiredStringValidationDescription" xml:space="preserve">
    <value>Text color will change accordingly to the style that is configured when password confirmation doesn't match password.</value>
  </data>
  <data name="RequiredStringValidationShortDescription" xml:space="preserve">
    <value>Changes an Entry's style when its text does not match another string.</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="ConfirmPassword" xml:space="preserve">
    <value>Confirm password</value>
  </data>
  <data name="PasswordMatched" xml:space="preserve">
    <value>Password matched</value>
  </data>
  <data name="DateTimeOffsetConverterShortDescription" xml:space="preserve">
    <value>A converter that allows to convert from a DateTimeOffset type to a DateTime type.</value>
  </data>
  <data name="ExpanderTitle" xml:space="preserve">
    <value>Expander</value>
  </data>
  <data name="ExpanderDescription" xml:space="preserve">
    <value>The Xamarin.Forms Expander control provides an expandable container to host any content.</value>
  </data>
  <data name="NestedExpander" xml:space="preserve">
    <value>Nested expander</value>
  </data>
  <data name="EnableNested" xml:space="preserve">
    <value>Enable nested:</value>
  </data>
  <data name="UserStoppedTypingBehaviorDescription" xml:space="preserve">
    <value>This behavior waits for the user to stop typing and then executes a Command. The waiting threshold is adjustable, as well as there is an option to dismiss the keyboard after the user has stopped typing.</value>
  </data>
  <data name="UserStoppedTypingBehaviorDismissKeyboardOptionLabel" xml:space="preserve">
    <value>Should dismiss keyboard automatically</value>
  </data>
  <data name="UserStoppedTypingBehaviorSearchBarPlaceholderText" xml:space="preserve">
    <value>Start searching...</value>
  </data>
  <data name="UserStoppedTypingBehaviorSearchResultLabelFormat" xml:space="preserve">
    <value>Performed search for '{0}'</value>
  </data>
  <data name="UserStoppedTypingBehaviorShortDescription" xml:space="preserve">
    <value>This behavior waits for the user to stop typing and then executes a Command.</value>
  </data>
  <data name="UserStoppedTypingBehaviorTimeThresholdOptionLabel" xml:space="preserve">
    <value>User stopped typing time threshold (in ms)</value>
  </data>
  <data name="AutoGridLayoutBehaviorDescription" xml:space="preserve">
    <value>This behavior assigns grid row and column based on the order a view is added to the grid.</value>
  </data>
  <data name="ImpliedOrderGridDescriptionLabel" xml:space="preserve">
    <value>Behavior that auto sets row and column assignments of child views by the order they are defined in the grid. RowSpan and ColumnSpan are honored during the auto-assignment of row and column.

By default, if more cells in the grid are needed by the number of child views then are defined an output warning will be generated. If a row or column span exceeds the defined rows and columns output warnings will be generated.

The user may at their choice decide to have output warnings treated as exceptions.

If the user manually assigns a row or column on a view, it will be honored.</value>
  </data>
  <data name="ShowSnackBarWithActionButton" xml:space="preserve">
    <value>Show SnackBar</value>
  </data>
  <data name="ShieldTitle" xml:space="preserve">
    <value>Shield</value>
  </data>
  <data name="ShieldDescription" xml:space="preserve">
    <value>Shields can show some status information or call-to-action in a badge-like way.</value>
  </data>
  <data name="ActionsPageDescription" xml:space="preserve">
    <value>Show SnackBar, toast etc</value>
  </data>
  <data name="ActionsPageTitle" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="ShowSnackBarNoActionButton" xml:space="preserve">
    <value>Show toast</value>
  </data>
  <data name="SnackBarIsClosedByTimeout" xml:space="preserve">
    <value>SnackBar is closed by timeout</value>
  </data>
  <data name="SnackBarIsClosedByUser" xml:space="preserve">
    <value>SnackBar is closed by user</value>
  </data>
  <data name="GravatarImageSourceDescription" xml:space="preserve">
    <value>The GravatarImageSource allows you to easily utilize a users Gravatar image from Gravatar.com using nothing but their email address.</value>
  </data>
  <data name="GravatarImageSourceTitle" xml:space="preserve">
    <value>GravatarImageSource</value>
  </data>
  <data name="DefaultGravatar" xml:space="preserve">
    <value>Default Gravatar</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="FullImageSource" xml:space="preserve">
    <value>Full Image Source</value>
  </data>
  <data name="GravatarSize" xml:space="preserve">
    <value>GravatarSize</value>
  </data>
  <data name="XAMLExtension" xml:space="preserve">
    <value>XAML Extension</value>
  </data>
  <data name="ContentButtonTitle" xml:space="preserve">
    <value>ContentButton</value>
  </data>
  <data name="ContentButtonDescription" xml:space="preserve">
    <value>ContentButton allows you to add content view to a button</value>
  </data>
  <data name="ContentButtonTapDescription" xml:space="preserve">
    <value>Tap here</value>
  </data>
  <data name="ContentButtonTapMessage" xml:space="preserve">
    <value> ContentButton clicks</value>
  </data>
  <data name="UserStoppedTypingBehaviorMinimumLengthThresholdOptionLabel" xml:space="preserve">
    <value>Minimum length threshold (number of characters)</value>
  </data>
  <data name="Effects Description" xml:space="preserve">
    <value>Effects are used to add visual customization on a control by control bases</value>
  </data>
  <data name="EffectsTitle" xml:space="preserve">
    <value>Effects</value>
  </data>
  <data name="SafeAreaShortDescription" xml:space="preserve">
    <value>The SafeAreaEffect is an effectwill help to make sure that content isn't clipped by rounded device corners, the home indicator, or the sensor housing on an iPhone X.</value>
  </data>
  <data name="SafeAreaLongDescription" xml:space="preserve">
    <value>The SafeAreaEffect is an effect that can be added to any element through an attached property to indicate whether or not that element should take current safe areas into account. This is an area of the screen that is safe for all devices that use iOS 11 and greater. Specifically, it will help to make sure that content isn't clipped by rounded device corners, the home indicator, or the sensor housing on an iPhone X. The effect only targets iOS, meaning that on other platforms it does not do anything.</value>
  </data>
  <data name="ToggleSafeAreaEffect" xml:space="preserve">
    <value>Toggle SafeAreaEffect</value>
  </data>
  <data name="MaxLengthReachedBehaviorShortDescription" xml:space="preserve">
    <value>This behavior invokes an EventHandler and executes a Command when the MaxLength of an InputView has been reached.</value>
  </data>
  <data name="MaxLengthReachedBehaviorCommandExecutionLabelFormat" xml:space="preserve">
    <value>MaxLength reached with value: '{0}'.</value>
  </data>
  <data name="MaxLengthReachedBehaviorDescription" xml:space="preserve">
    <value>When the MaxLength on an Entry field has been reached, any configured EventHandler gets invoked and a Command gets Executed.</value>
  </data>
  <data name="MaxLengthReachedBehaviorDismissKeyboardOptionLabel" xml:space="preserve">
    <value>Should dismiss keyboard automatically</value>
  </data>
  <data name="MaxLengthReachedBehaviorEntryPlaceholder" xml:space="preserve">
    <value>Start typing till MaxLength is reached...</value>
  </data>
  <data name="MaxLengthReachedBehaviorFirstScenarioDescription" xml:space="preserve">
    <value>When the MaxLength of the first Entry has been reached, the focus will be set to the next Entry field.</value>
  </data>
  <data name="MaxLengthReachedBehaviorMaxLengthSettingLabel" xml:space="preserve">
    <value>MaxLength setting on Entry field</value>
  </data>
  <data name="MaxLengthReachedBehaviorNextEntryPlaceholder" xml:space="preserve">
    <value>This Entry will then get focus...</value>
  </data>
  <data name="MaxLengthReachedBehaviorSecondScenarioDescription" xml:space="preserve">
    <value>When the MaxLength of this Entry is reached, a Command is executed. Below are all Command executions shown.</value>
  </data>
</root>